// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Music.Persistence;

#nullable disable

namespace Music.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240210165019_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Music.Domain.Aggregates.AlbumAggregate.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlbumName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Album", "music");
                });

            modelBuilder.Entity("Music.Domain.Aggregates.ArtistAggregate.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FollowCount")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Artists", "music");
                });

            modelBuilder.Entity("Music.Domain.Aggregates.ListenerAggregate.Listener", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Listeners", "music");
                });

            modelBuilder.Entity("Music.Domain.Aggregates.PlaylistAggregate.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlaylistName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.ToTable("Playlist", "music");
                });

            modelBuilder.Entity("Music.Domain.Aggregates.SongAggregate.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AudioFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("SongCategory")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("SongName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Songs", "music");
                });

            modelBuilder.Entity("Music.Domain.DomainEntities.AlbumSong", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("AlbumSong");
                });

            modelBuilder.Entity("Music.Domain.DomainEntities.ArtistAlbum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("ArtistAlbum");
                });

            modelBuilder.Entity("Music.Domain.DomainEntities.ArtistListener", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ListenerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ListenerId");

                    b.ToTable("ArtistListener");
                });

            modelBuilder.Entity("Music.Domain.DomainEntities.ListenerPlaylist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ListenerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ListenerId");

                    b.ToTable("ListenerPlaylist");
                });

            modelBuilder.Entity("Music.Domain.DomainEntities.PlaylistSong", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.ToTable("PlaylistSong");
                });

            modelBuilder.Entity("Music.Domain.DomainEntities.AlbumSong", b =>
                {
                    b.HasOne("Music.Domain.Aggregates.AlbumAggregate.Album", null)
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Music.Domain.DomainEntities.ArtistAlbum", b =>
                {
                    b.HasOne("Music.Domain.Aggregates.ArtistAggregate.Artist", null)
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Music.Domain.DomainEntities.ArtistListener", b =>
                {
                    b.HasOne("Music.Domain.Aggregates.ListenerAggregate.Listener", null)
                        .WithMany("Artists")
                        .HasForeignKey("ListenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Music.Domain.DomainEntities.ListenerPlaylist", b =>
                {
                    b.HasOne("Music.Domain.Aggregates.ListenerAggregate.Listener", null)
                        .WithMany("Playlists")
                        .HasForeignKey("ListenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Music.Domain.DomainEntities.PlaylistSong", b =>
                {
                    b.HasOne("Music.Domain.Aggregates.PlaylistAggregate.Playlist", null)
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Music.Domain.Aggregates.AlbumAggregate.Album", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Music.Domain.Aggregates.ArtistAggregate.Artist", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Music.Domain.Aggregates.ListenerAggregate.Listener", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Playlists");
                });

            modelBuilder.Entity("Music.Domain.Aggregates.PlaylistAggregate.Playlist", b =>
                {
                    b.Navigation("Songs");
                });
#pragma warning restore 612, 618
        }
    }
}
